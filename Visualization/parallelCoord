#!/usr/bin/env python3

import sys
import numpy as np
import pandas as pd
import plotly.graph_objects as go

_dataset = '../dataset/athlete_events.csv'
_sports = list()
_teams = list()
_medals = ["Gold", "Silver", "Bronze", "nan"]
_reducer = [True, True, True, True]

def newSport(test):
    for sport in _sports:
        if sport == test:
            return False
    return True

def getDisciplines(csv):
    global _sports
    for line in csv['Sport']:
        if (newSport(line) == True):
            _sports.append(line)

def newTeam(test):
    for team in _teams:
        if team == test:
            return False
    return True

def getCountries(csv):
    global _teams
    for line in csv['NOC']:
        if (newTeam(line) == True):
            _teams.append(line)

def dataSelector():
    try:
        with open(_dataset, 'r') as f:
            filtered_csv = pd.read_csv(_dataset, usecols=['NOC', 'Year', 'Sport', 'Medal'])
            getDisciplines(filtered_csv)
            getCountries(filtered_csv)
            f.close()
            return filtered_csv
    except:
        print(f'The program could not find the dataset.\nPlease make sure the archive has been unzipped, and that the dataset is located at the following path : \'{_dataset}\'')
        exit(1)

def dataTranslator(csv):
    colTeam = list()
    colYear = list()
    colSport = list()
    colMedal = list()
    for line in csv['NOC']:
        colTeam.append(_teams.index(line))
    for line in csv['Year']:
        colYear.append(int(line))
    for line in csv['Sport']:
        colSport.append(_sports.index(line))
    for line in csv['Medal']:
        if type(line) is str:
            colMedal.append(_medals.index(line))
        else:
            colMedal.append(3)

    visualizer(colTeam, colYear, colSport, colMedal)
    return colTeam, colYear, colSport, colMedal

def usersChoice(team, year, sport, medal):
    content = list()
    if _reducer[0] is True:
        content.append(
            dict(label = 'Medal',
                tickvals = list(range(0, len(_medals))),
                ticktext = ["Gold", "Silver", "Bronze", "None"],
                values = medal),
        )
    if _reducer[1] is True:
        content.append(
            dict(label = "Country",
                tickvals = list(range(0, len(_teams))),
                ticktext = _teams,
                values = team),
        )
    if _reducer[2] is True:
        content.append(
            dict(label = 'Sport',
                tickvals = list(range(0, len(_sports))),
                ticktext = _sports,
                values = sport),
        )
    if _reducer[3] is True:
        content.append(
            dict(label = 'Year',
                values = year),
        )
    return content

def visualizer(team, year, sport, medal):
    content = usersChoice(team, year, sport, medal)

    fig = go.Figure(data=
        go.Parcoords(
            line = dict(color = year,
                    colorscale = 'Electric',
                    showscale = True,
                    cmin = 1900,
                    cmax = 2020),
            dimensions = content
        )
    )
    fig.show()

def buildData():
    filtered_csv = dataSelector()
    colTeam, colYear, colSport, colMedal = dataTranslator(filtered_csv)
    visualizer(colTeam, colYear, colSport, colMedal)

def printHelp():
    print('USAGE:')
    print(f'\tpython3 {sys.argv[0]} [Options] [...]\n')
    print('DEFINITION:')
    print('\tThis projets presents a diagram showing the medals obtains by each Olympic country in every discipline since 1896.')
    print('\tYou can hide one or several fields by executing the program with the following argments: "--medal", "--team", "--sport" or --year".\n')
    print('EXAMPLE:')
    print(f'\t python3 {sys.argv[0]} --team\n')
    print('NOTE:')
    print('\tHiding more than two fields is useless.')
    print('\tThe generation and manipulation of the graph may take a heavy toll on your computers ressources.')
    print('\tTall screen recommended, or the countries names may mix with one another.\n')

def parseArgs(size):
    for arg in sys.argv:
        if arg == sys.argv[0]:
            pass
        elif arg == '--medal':
            _reducer[0] = False
        elif arg == '--team':
            _reducer[1] = False
        elif arg == '--sport':
            _reducer[2] = False
        elif arg == '--year':
            _reducer[3] = False
        elif arg == '-h' or arg == '--help':
            printHelp()
            exit(0)
        else:
            printHelp()
            exit(1)

def main():
    if len(sys.argv) != 1:
        parseArgs(len(sys.argv))
    buildData()

if __name__ == "__main__":
    main()